# SPDX-License-Identifier: AGPL-3.0-or-later
import math
def generate_left_weighted_sequence(max_units=18, max_tens=9):
    sequence = []
    for units in range(1, max_units + 1):
        digits = len(str(units))
        base = 10 ** digits
        for tens in range(1, max_tens + 1):
            number = tens * base + units
            sequence.append(number)
    return sequence
def balanced_ternary_coeffs(w, weights):
    coeffs = []
    x = w
    for wt in weights:
        rem = x % 3
        if rem == 2:
            coeffs.append(-1)
            x = x // 3 + 1
        else:
            coeffs.append(rem)
            x = x // 3
    return coeffs
def get_weighing_placements(max_n=18):
    weights = [3**i for i in range(4)]
    placements = {}
    for w in range(1, max_n + 1):
        coeffs = balanced_ternary_coeffs(w, weights)
        placement_str = []
        for i, c in enumerate(coeffs):
            if c == 1:
                placement_str.append(f"{weights[i]} on right")
            elif c == -1:
                placement_str.append(f"{weights[i]} on left")
        placements[w] = ', '.join(placement_str) or "Balance (no weights needed)"
    return placements
if __name__ == "__main__":
    seq = generate_left_weighted_sequence(max_units=18)
    print("Left-Hand Side Weighted Sequence (up to 18 units, extendable):")
    print(seq)
    placements = get_weighing_placements(max_n=18)
    print("\nBalance Scale Placements (1:1 ratio) for Integers 1 to 18:")
    for w, placement in placements.items():
        print(f"Measure {w}: {placement}")
