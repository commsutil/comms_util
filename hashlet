# SPDX-License-Identifier: AGPL-3.0-or-later
import greenlet
import hashlib
import time
import logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)
class Hashlet(greenlet.Greenlet):
    def __init__(self, run, *args, **kwargs):
        super().__init__(run=run, *args, **kwargs)
        self.hash_id = self._compute_hash()
        self.rgb_color = self._hash_to_rgb()
        logger.info(f"Hashlet init: ID={id(self)}, Hash={self.hash_id[:8]}, RGB={self.rgb_color}")
    def _compute_hash(self):
        data = f"{id(self)}:{time.time()}"
        return hashlib.sha256(data.encode()).hexdigest()
    def _hash_to_rgb(self):
        hash_int = int(self.hash_id, 16) % 0xFFFFFF
        return f"#{hash_int:06x}"
    def switch(self, *args, **kwargs):
        result = super()._greenlet_switch(*args, **kwargs)
        self.hash_id = self._compute_hash()
        logger.info(f"Hashlet switch: New Hash={self.hash_id[:8]}, RGB={self.rgb_color}")
        return result
def example_task(data):
    time.sleep(1)
    return hashlib.sha256(data.encode()).hexdigest()
if __name__ == "__main__":
    h1 = Hashlet(example_task, "MEI data 1")
    h2 = Hashlet(example_task, "MEI data 2")
    result1 = h1.switch()
    result2 = h2.switch()
    print(f"Result 1: {result1}, RGB: {h1.rgb_color}")
    print(f"Result 2: {result2}, RGB: {h2.rgb_color}")
